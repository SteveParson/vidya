[project]
name = "vidya"
version = "0.1.0"
description = "A Discord bot for finding market values on eBay"
authors = [
    { name = "Steve Parson", email = "me@steveparson.ca" }
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.12"
keywords = ["discord", "ebay", "price-tracking", "statistics"]
dependencies = [
    "discord-py>=2.4.0,<3.0.0",
    "httpx>=0.28.1,<0.29.0",
    "selectolax>=0.3.27,<0.4.0",
    "pandas>=2.2.3,<3.0.0",
    "python-dotenv>=1.0.1,<2.0.0"
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [
    { include = "vidya", from = "src" }
]

[project.scripts]
vidya = "vidya.bot:main"

[tool.poetry.group.dev.dependencies]
ruff = ">=0.9.6,<1.0.0"
pytest = ">=8.0.0,<9.0.0"
pytest-asyncio = ">=0.23.0,<0.24.0"
pytest-cov = ">=4.1.0,<5.0.0"
black = ">=24.0.0,<25.0.0"
pre-commit = ">=3.6.0,<4.0.0"
pytest-mock = ">=3.14.0,<4.0.0"

[tool.coverage.html]
directory = "coverage_html"

[tool.ruff]
line-length = 88
indent-width = 4

target-version = "py312"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "UP", # pyupgrade
    "N", # pep8-naming
    "RUF", # ruff-specific rules
    "D", # pydocstyle
    "S", # flake8-bandit
    "A", # flake8-builtins
    "ANN", # for type annotation checks
    "ERA", #for commented-out code detection
    "TCH", # for type checking imports
    "TID" # for tidy imports
]

fixable = ["ALL"]
unfixable = []

ignore = [
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "S101", # Use of assert detected
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D107" # Missing docstring in `__init__`
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["vidya"]
combine-as-imports = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=vidya --cov-report=term-missing"
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "raise ImportError",
    "except ImportError:",
]
